#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã AI –º–æ–¥—É–ª—è
"""

import os
import sys
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv('config.env')

def test_ai_module():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –º–æ–¥—É–ª—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –º–æ–¥—É–ª—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –º–æ–¥—É–ª—å
        from ai_analyzer import AIAnalyzer
        
        print("‚úÖ AI –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        ai_2_api_key = os.getenv("AI_2_API_KEY", "your_openai_api_key_here")
        ai_2_base_url = os.getenv("AI_2_BASE_URL", "https://api.proxyapi.ru/openai/v1")
        ai_2_model = os.getenv("AI_2_MODEL", "gpt-4o-mini")
        
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   API Key: {'*' * 10 if ai_2_api_key != 'your_openai_api_key_here' else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"   Base URL: {ai_2_base_url}")
        print(f"   Model: {ai_2_model}")
        
        if ai_2_api_key == "your_openai_api_key_here":
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.env")
            print("üìã –î–æ–±–∞–≤—å—Ç–µ AI_2_API_KEY –≤ config.env")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        analyzer = AIAnalyzer()
        print("‚úÖ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        status = analyzer.get_status()
        
        if status['connected']:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"   –ú–æ–¥–µ–ª—å: {status['model']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {status['status']}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            {'name': '–ò–≤–∞–Ω', 'age': 25, 'salary': 50000, 'department': 'IT'},
            {'name': '–ú–∞—Ä–∏—è', 'age': 30, 'salary': 60000, 'department': 'HR'},
            {'name': '–ü–µ—Ç—Ä', 'age': 28, 'salary': 55000, 'department': 'IT'},
            {'name': '–ê–Ω–Ω–∞', 'age': 35, 'salary': 70000, 'department': 'Finance'},
            {'name': '–°–µ—Ä–≥–µ–π', 'age': 27, 'salary': 52000, 'department': 'IT'},
            {'name': '–ï–ª–µ–Ω–∞', 'age': 32, 'salary': 65000, 'department': 'HR'},
            {'name': '–î–º–∏—Ç—Ä–∏–π', 'age': 29, 'salary': 58000, 'department': 'IT'},
            {'name': '–û–ª—å–≥–∞', 'age': 33, 'salary': 68000, 'department': 'Finance'},
            {'name': '–ê–ª–µ–∫—Å–µ–π', 'age': 26, 'salary': 51000, 'department': 'IT'},
            {'name': '–¢–∞—Ç—å—è–Ω–∞', 'age': 31, 'salary': 62000, 'department': 'HR'},
            {'name': '–ú–∏—Ö–∞–∏–ª', 'age': 34, 'salary': 72000, 'department': 'Finance'},
            {'name': '–ù–∞—Ç–∞–ª—å—è', 'age': 28, 'salary': 54000, 'department': 'IT'},
            {'name': '–ê–Ω–¥—Ä–µ–π', 'age': 36, 'salary': 75000, 'department': 'Finance'},
            {'name': '–Æ–ª–∏—è', 'age': 29, 'salary': 56000, 'department': 'IT'},
            {'name': '–í–ª–∞–¥–∏–º–∏—Ä', 'age': 32, 'salary': 67000, 'department': 'HR'}
        ]
        
        test_columns = ['name', 'age', 'salary', 'department']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        result = analyzer.analyze_data(test_data, test_columns)
        
        if result['success']:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"   –ú–æ–¥–µ–ª—å: {result['model']}")
            print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print("-" * 50)
            print(result['analysis'])
            print("-" * 50)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI –º–æ–¥—É–ª—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –º–æ–¥—É–ª—è...")
    print("=" * 50)
    
    success = test_ai_module()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print("üéØ AI –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.env")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 